import logging

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from app.keyboards import reply
from app.services import utils
from app.misc.states import Buy
from aiogram.utils.exceptions import MessageToDeleteNotFound


from .menu import list_products

logger = logging.getLogger(__name__)


async def add_to_basket(message: types.CallbackQuery, state: FSMContext):
    call = message
    product_uid = call.data.split(':')[-1]

    try:
        await utils.delete_inline_keyboard(message.bot, message.from_user.id)
        logger.info(
            f'add_to_basket OK {message.from_user.id} inline keyboard was removed')
    except MessageToDeleteNotFound:
        logger.info(
            f'add_to_basket OK {message.from_user.id} inline keyboard was removed earlier')
    except Exception as err:
        logger.error(
            f'add_to_basket utils.delete_inline_keyboard '
            f'BAD {message.from_user.id} get {err.args}')

    await Buy.add_quantity.set()

    async with state.proxy() as data:
        data.setdefault('order', {})
        data['order'][product_uid] = 0
        data['current_uid'] = product_uid
        data['partuid'] = call.data.split(':')[1]
        current_title = data["current_title"]

    # struct INFO - –Ω–∞–∑–≤–∞_–º–µ—Ç–æ–¥–∞ —Å—Ç–∞—Ç—É—Å_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–æ–º–µ–Ω—Ç–∞—Ä

    await call.message.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏:\n<b>{current_title}</b>')
    await call.message.answer('–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å: –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–µ —á–∏—Å–ª–æ, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ‚å®Ô∏è‚§µÔ∏è',
                              reply_markup=reply.kb_quantity)


async def add_quantity_to_order(message: types.Message, state: FSMContext):

    try:
        async with state.proxy() as data:
            current_uid = data['current_uid']
            data['order'][current_uid] = int(message.text)
            await message.answer(f'–î–æ–¥–∞–≤ –¥–æ –∫–æ—à–∏–∫–∞:\n\n <b>{data["order"][current_uid]} —à—Ç. * '
                                 f'{data["current_title"]}</b>',
                                 reply_markup=reply.kb_catalog)
            logger.info(
                f'add_quantity_to_order OK {message.from_user.id} added sku={current_uid} quantity={(data["order"][current_uid])} to basket')
        # await state.finish()
            await Buy.free_state.set()
            await list_products(message, data['partuid'], state=state)
    except ValueError:
        await message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º, –∞ –≤–∏ –≤–∫–∞–∑–∞–ª–∏ {message.text}.\n'
                             f'–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏.')
        await message.answer('–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å: –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–µ —á–∏—Å–ª–æ, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ‚å®Ô∏è‚§µÔ∏è',
                             reply_markup=reply.kb_quantity)


async def do_not_add_product(message: types.Message, state: FSMContext):
    await message.answer('–î–æ–±—Ä–µ üòá', reply_markup=reply.kb_catalog)
    await Buy.free_state.set()
    try:
        async with state.proxy() as data:
            del data['order'][data['current_uid']]
            category = data['partuid']
        # await state.finish()
        await list_products(message, category, state=state)
    except KeyError as err:
        logger.error(err.args)


def register_cart(dp: Dispatcher):
    dp.register_callback_query_handler(
        add_to_basket, Text(startswith='buy:'), state='*')
    dp.register_message_handler(
        do_not_add_product, Text(equals='–ü–µ—Ä–µ–¥—É–º–∞–≤', ignore_case=True), state='*')
    dp.register_message_handler(add_quantity_to_order, state=Buy.add_quantity)
