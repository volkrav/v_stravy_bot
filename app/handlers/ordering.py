from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageToDeleteNotFound
from aiogram.dispatcher.filters.state import StatesGroup, State

from app.keyboards import reply

from app.handlers import order
from app.handlers import start
from app.handlers import echo
from app.services import utils
from app.handlers.cart import Buy


class Ordering(StatesGroup):
    start = State()
    delivery_or_pickup = State()
    pickup = State()
    get_name = State()
    get_phone = State()


async def command_start_ordering(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data.setdefault('ordering', {})
    await message.answer('–ì–æ—Ç–æ–≤–∏–π –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', reply_markup=reply.kb_delivery_or_pickup)
    await Ordering.delivery_or_pickup.set()


async def command_delivery(message: types.Message, state: FSMContext):
    if message.text == 'üí™ –°–∞–º–æ–≤–∏–≤—ñ–∑':
        await start.command_location(message, state)
        answer = "–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ—Ñ–æ—Ä–º–ª—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∞–º–æ–≤–∏–≤—ñ–∑–æ–º?"
        await Ordering.pickup.set()
    elif message.text == 'üöö –î–æ—Å—Ç–∞–≤–∫–∞':
        await start.command_delivery(message, state)
        answer = "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é?"
    else:
        return await echo.bot_echo(message, state)
    await message.answer(answer, reply_markup=reply.kb_yes_or_no)


async def command_pickup(message: types.Message, state: FSMContext):
    if message.text == '–ù—ñ':
        return await command_start_ordering(message, state)
    elif message.text == '–¢–∞–∫':
        async with state.proxy() as data:
            data['ordering']['pickup'] = True
    await message.answer(text='–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à–µ —ñ–º\'—è: ‚å®Ô∏è‚§µÔ∏è',
                            reply_markup=reply.kb_cancel_ordering)
    await Ordering.get_name.set()


async def command_get_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ordering']['name'] = message.text
        await message.answer(data['ordering'])
    await message.answer('–î–ª—è –∑–≤\'—è–∑–∫—É –∑ –í–∞–º–∏ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚å®Ô∏è‚§µÔ∏è',
                         reply_markup=reply.kb_share_contact)
    await Ordering.get_phone.set()


async def command_get_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ordering']['phone'] = message.contact.phone_number
    await _create_order_list(message, state)


async def _create_order_list(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_order = data['order']
        product_list = await utils.create_product_list(current_order.keys())
        answer = '***** –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: *****\n\n'
        amount_payable = 0
        for index, product in enumerate(product_list, 1):
            amount_payable += current_order[product.uid] * product.price
            answer += (f'# {index} \n'
                       f'<b>{current_order[product.uid]} —à—Ç. * {product.title}</b>\n'
                       f'–¶—ñ–Ω–∞: {product.price} –≥—Ä–Ω.\n'
                       f'–í—Å—å–æ–≥–æ: {current_order[product.uid] * product.price} –≥—Ä–Ω.\n\n'
                       f'–°—É–º–º–∞: {amount_payable}\n\n'
                       f'–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n'
                       )
        order = await utils.create_order(data['ordering'])
        if order.pickup:
            amount_payable = round(amount_payable * 0.9)
        answer += (
            f'–í–∞—à–µ —ñ–º\'—è: {order.name}\n'
            f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {await _format_phone_number(order.phone)}\n'
            f'–î–æ—Å—Ç–∞–≤–∫–∞: {order.address}\n\n'
        )
        answer += f'–°—É–º–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {amount_payable} –≥—Ä–Ω.'
    await message.answer(answer)


async def command_cancel_ordering(message: types.Message, state: FSMContext):
    await order.command_view_order(message, state)


async def _format_phone_number(phone: str) -> str:
    if '+' not in phone:
        phone = '+' + phone
    return (f'({phone[3:6]}) '
            f'{phone[6:9]}-'
            f'{phone[9:11]}-'
            f'{phone[11:]}'
            )


def register_ordering(dp: Dispatcher):
    dp.register_message_handler(command_start_ordering, Text(equals='üöÄ –û—Ñ–æ—Ä–º–∏—Ç–∏',
                                                             ignore_case=True), state=Buy.view_order)
    dp.register_message_handler(command_cancel_ordering, Text(equals='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏',
                                                              ignore_case=True), state='*')
    dp.register_message_handler(command_delivery,
                                state=Ordering.delivery_or_pickup)
    dp.register_message_handler(command_pickup, state=Ordering.pickup)
    dp.register_message_handler(command_get_name, state=Ordering.get_name)
    dp.register_message_handler(command_get_phone, content_types=types.ContentType.CONTACT,
                                state=Ordering.get_phone)

# ‚ùå –í—ñ–¥–º—ñ–Ω–∞
