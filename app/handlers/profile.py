import logging


from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
import aiogram.utils.markdown as fmt


from app.services import utils
from app.handlers import start
from app.misc.states import Start
from app.keyboards import reply
from app.misc.states import Profile

'''
- –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º—è
- –ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É
- –ù–∞–∑–∞–¥
'''
logger = logging.getLogger(__name__)


async def command_view_profile(message: types.Message, state: FSMContext):
    await Profile.view.set()
    if await utils.check_user_in_users(message.from_user.id):
        await Profile.change_data.set()
        user: utils.User = await utils.get_user_data(message.from_user.id)
        answer = (f'<b>–í–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n\n</b>'
                  f'<b>‚Ä¢ –Ü–º\'—è:</b> {user.name}\n'
                  f'<b>‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {await utils.format_phone_number(user.phone)}\n'
                  f'<b>‚Ä¢ –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user.address}\n'
                  )
        markup = reply.kb_profile
    else:
        answer = (f'–í —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è –í–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, '
                  f'—è–∫—É —è, –∑ –í–∞—à–æ–≥–æ –¥–æ–∑–≤–æ–ª—É, –∑–∞–ø–∞–º\'—è—Ç–∞—é –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –ø–µ—Ä—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n'
                  f'–ù–∞–¥–∞–ª—ñ –æ—Å–æ–±–∏—Å—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –º–æ–∂–Ω–∞ –±—É–¥–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏.'
                  )
        markup = reply.kb_back
    await message.bot.send_message(chat_id=message.from_user.id,
                                   text=answer,
                                   reply_markup=markup)


async def command_back_to_main_menu(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if (current_state == 'Profile:change_name' or
            current_state == 'Profile:change_address'):
        return await command_view_profile(message, state)
    await start.user_start(message, state)


async def command_change_data(message: types.Message, state: FSMContext):
    if message.text == '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º\'—è':
        await Profile.change_name.set()
        await message.answer(text='–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–≤–µ —ñ–º\'—è: ‚å®Ô∏è‚§µÔ∏è',
                             reply_markup=reply.kb_back)
    elif message.text == '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É':
        await message.answer(text='–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É: ‚å®Ô∏è‚§µÔ∏è',
                             reply_markup=reply.kb_back)
        await Profile.change_address.set()


async def command_change_name(message: types.Message, state: FSMContext):
    try:
        await utils.change_user_name(message.from_user.id, fmt.quote_html(message.text))
        logger.info(
            f'command_change_name OK {message.from_user.id} change name as {fmt.quote_html(message.text)}')
        await command_view_profile(message, state)
    except Exception as err:
        logger.error(
            f'command_change_name BAD {message.from_user.id} get {err.args}')


async def command_change_address(message: types.Message, state: FSMContext):
    try:
        await utils.change_user_address(message.from_user.id, fmt.quote_html(message.text))
        logger.info(
            f'command_change_address OK {message.from_user.id} change address as {fmt.quote_html(message.text)}')
        await command_view_profile(message, state)
    except Exception as err:
        logger.error(
            f'command_change_name BAD {message.from_user.id} get {err.args}')


async def command_del_data(message: types.Message, state: FSMContext):
    try:
        await utils.del_user_data(message.from_user.id)
        await message.answer('üëç –í–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ.')
        logger.info(
            f'command_del_data OK {message.from_user.id} deleted data successfully')
        await start.user_start(message, state)
    except Exception as err:
        await message.answer('‚òπÔ∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ –ø–æ–º–∏–ª–∫—É –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.')
        logger.error(
            f'command_del_data BAD {message.from_user.id} get {err.args}')
        await start.user_start(message, state)


def register_profile(dp: Dispatcher):
    dp.register_message_handler(command_view_profile,
                                Text(equals='üòá –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è',
                                     ignore_case=True),
                                state=[Start.free, None])
    dp.register_message_handler(command_back_to_main_menu,
                                Text(equals='‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                                     ignore_case=True),
                                state='*')
    dp.register_message_handler(command_change_data,
                                Text(startswith='‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏',
                                     ignore_case=True),
                                state=[Profile.change_data, None])
    dp.register_message_handler(command_change_name,
                                state=Profile.change_name)
    dp.register_message_handler(command_change_address,
                                state=Profile.change_address)
    dp.register_message_handler(command_del_data,
                                Text(equals='‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —É—Å—ñ –¥–∞–Ω—ñ',
                                     ignore_case=True),
                                state=[Profile.change_data, None])
