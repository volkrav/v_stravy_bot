import logging

from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher

from app.services.parser import runparser
from app.handlers import start


logger = logging.getLogger(__name__)


async def admin_command_parser(message: types.Message, state: FSMContext):
    try:

        await message.answer('–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! –ü–æ—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...')
        logger.info(
            f'admin_command_parser OK {message.from_user.id} started parsing')
        runparser.main()
        await message.answer('üëç –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —Ç–æ–≤–∞—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏—Å—è.')
        await start.user_start(message, state)
        logger.info(
            f'admin_command_parser OK {message.from_user.id} successfully parsed')
    except Exception as err:
        await message.answer('‚òπÔ∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ –ø–æ–º–∏–ª–∫—É –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.')
        logger.error(
            f'admin_command_parser BAD {message.from_user.id} get {err.args}')


def register_admin(dp: Dispatcher):
    dp.register_message_handler(admin_command_parser,
                                commands=['parser'],
                                state='*',
                                is_admin=True)
