from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageToDeleteNotFound

from app.handlers import start
from app.handlers.cart import Buy
from app.keyboards import reply
from app.services import utils
from app.misc import view


async def command_view_order(message: types.Message, state: FSMContext):
    await Buy.view_order.set()
    await utils.delete_inline_keyboard(message.bot, message.from_user.id)

    async with state.proxy() as data:
        if 'order' in data and data['order'].keys():
            view_list_products = await view.list_products(data['order'])
            answer = '***** –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: *****\n\n' + view_list_products.text
            msg = await message.answer(text=answer, reply_markup=reply.kb_menu_view_order)
            data['msg_view_order'] = msg['message_id']
        else:
            answer = '–ö–æ—à–∏–∫ —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä'
            await message.answer(text=answer)
            await start.command_menu(message, state=state)


async def command_change_order(message: types.Message, state: FSMContext):
    await Buy.change_order.set()

    async with state.proxy() as data:
        try:
            await message.bot.delete_message(message.from_user.id, data['msg_view_order'])
        except MessageToDeleteNotFound:
            print(f'–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {data["msg_view_order"]} –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
        except KeyError:
            print(
                f'command_change_order –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, data[\'msg_view_order\'] –Ω–µ —ñ—Å–Ω—É—î')

        if 'order' in data and data['order'].keys():
            current_order = data['order']
            product_list = await utils.create_product_list(current_order.keys())
            answer = '***** –†–µ–¥–∞–≥—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: *****\n\n'
            amount_payable = 0
            for index, product in enumerate(product_list, 1):
                amount_payable += current_order[product.uid] * product.price
                answer += (f'# {index} \n'
                           f'<b>{current_order[product.uid]} —à—Ç. * {product.title}</b>\n'
                           f'–¶—ñ–Ω–∞: {product.price} –≥—Ä–Ω.\n'
                           f'–í—Å—å–æ–≥–æ: {current_order[product.uid] * product.price} –≥—Ä–Ω.\n'
                           f'–ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å  /change{product.uid[:5]}\n'
                           f'–í–∏–¥–∞–ª–∏—Ç–∏: –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å  /del{product.uid[:5]}\n\n'
                           )
            answer += f'–°—É–º–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {amount_payable} –≥—Ä–Ω.'
            msg = await message.answer(text=answer, reply_markup=reply.ReplyKeyboardMarkup(
                keyboard=[[reply.KeyboardButton(text='‚ùå –í–∏—Ö—ñ–¥')]],
                resize_keyboard=True
            ))
            data['msg_change_order'] = msg['message_id']
        else:
            answer = '–ö–æ—à–∏–∫ —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä'
            await message.answer(answer)
            await start.command_menu(message, state)


async def command_change_quantity(message: types.Message, state: FSMContext):
    await Buy.change_quantity.set()
    current_uid = await _get_current_uid_from_part(message.text.split('/change')[-1], state)

    async with state.proxy() as data:
        try:
            await message.bot.delete_message(message.from_user.id, data['msg_change_order'])
        except MessageToDeleteNotFound:
            print(
                f'command_change_quantity - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {data["msg_change_order"]} –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
        except KeyError:
            print(
                f'command_change_quantity –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, data[\'msg_view_order\'] –Ω–µ —ñ—Å–Ω—É—î')

        current_quantity = data['order'][current_uid]
        data['uid_for_change_quantity'] = current_uid

    product = await utils.create_product(current_uid)
    await message.bot.send_photo(
        message.from_user.id,
        photo=product.img,
        caption=(
            f'<b>{product.title}</b>\n\n'
            f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ: {current_quantity} —à—Ç.'
        )
    )
    try:
        await message.bot.delete_message(message.from_user.id, message['message_id'])
    except MessageToDeleteNotFound:
        print(
            f'command_change_quantity - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message["message_id"]} –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
    except KeyError:
        print(
            f'command_change_quantity –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, data[\'msg_view_order\'] –Ω–µ —ñ—Å–Ω—É—î')

    await message.answer('–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å: –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–µ —á–∏—Å–ª–æ, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ‚å®Ô∏è‚§µÔ∏è',
                         reply_markup=reply.kb_quantity)


async def add_new_quantity(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            current_uid = data['uid_for_change_quantity']
            data['order'][current_uid] = int(message.text)
        await message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ!')
        await command_change_order(message, state)
    except ValueError:
        await message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º, –∞ –≤–∏ –≤–∫–∞–∑–∞–ª–∏ {message.text}.\n'
                             f'–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏.')
        await message.answer('–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å: –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–µ —á–∏—Å–ª–æ, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ‚å®Ô∏è‚§µÔ∏è',
                             reply_markup=reply.kb_quantity)


async def command_del_product(message: types.Message, state: FSMContext):

    current_uid = await _get_current_uid_from_part(
        message.text.split('/del')[-1], state)
    try:
        await message.bot.delete_message(message.from_user.id, message['message_id'])
    except MessageToDeleteNotFound:
        print(
            f'command_del_product - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message["message_id"]} –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
    except KeyError:
        print(
            f'command_del_product –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, data[\'msg_view_order\'] –Ω–µ —ñ—Å–Ω—É—î')

    async with state.proxy() as data:
        try:
            await message.bot.delete_message(message.from_user.id, data['msg_change_order'])
        except MessageToDeleteNotFound:
            print(
                f'command_change_quantity - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {data["msg_change_order"]} –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
        except KeyError:
            print(
                f'command_del_product –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, data[\'msg_view_order\'] –Ω–µ —ñ—Å–Ω—É—î')

        try:
            del data['order'][current_uid]
            await message.answer('–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ!')
        except KeyError:
            print(f'—Ç–æ–≤–∞—Ä {current_uid} –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
    await command_change_order(message, state)


async def cancel_add_new_quantity(message: types.Message, state: FSMContext):
    await command_change_order(message, state)


async def command_clear_order(message: types.Message, state: FSMContext):
    await message.answer('–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.')
    await state.finish()
    await start.command_menu(message, state=state)


async def command_back_to_view_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        await message.bot.delete_message(message.from_user.id, data['msg_change_order'])
    except MessageToDeleteNotFound:
        print(f'–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {data["msg_change_order"]} –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
    except KeyError:
        print(
            f'command_back_to_view_order –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, data[\'msg_view_order\'] –Ω–µ —ñ—Å–Ω—É—î')

    await command_view_order(message, state)


async def command_back_to_command_menu(message: types.Message, state: FSMContext):
    await start.command_menu(message, state=state)


async def _get_current_uid_from_part(part_uid: int, state: FSMContext) -> str:
    async with state.proxy() as data:
        for uid in data['order'].keys():
            if part_uid in uid:
                return uid
    return None


def register_order(dp: Dispatcher):
    dp.register_message_handler(command_view_order,
                                Text(equals='–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
                                     ignore_case=True),
                                state='*')
    dp.register_message_handler(command_back_to_command_menu,
                                Text(equals='‚Ü©Ô∏è –î–æ –∫–∞—Ç–∞–ª–æ–≥—É',
                                     ignore_case=True),
                                state=[None, Buy.view_order])
    dp.register_message_handler(command_change_order, Text(equals='‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏',
                                                           ignore_case=True), state=Buy.view_order)
    dp.register_message_handler(command_clear_order, Text(equals='üßπ –û—á–∏—Å—Ç–∏—Ç–∏',
                                                          ignore_case=True), state=Buy.view_order)
    dp.register_message_handler(command_back_to_view_order,
                                Text(equals='‚ùå –í–∏—Ö—ñ–¥', ignore_case=True),
                                state=[Buy.change_order])
    dp.register_message_handler(command_change_quantity, Text(startswith='/change',
                                                              ignore_case=True), state=Buy.change_order)
    dp.register_message_handler(command_del_product, Text(startswith='/del',
                                                          ignore_case=True), state=Buy.change_order)
    dp.register_message_handler(cancel_add_new_quantity, Text(equals='–ü–µ—Ä–µ–¥—É–º–∞–≤',
                                                              ignore_case=True), state=Buy.change_quantity)
    dp.register_message_handler(add_new_quantity, state=Buy.change_quantity)
